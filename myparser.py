#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname  # noqa
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main  # noqa

KEYWORDS = {}  # type: ignore


class TatsuBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
        )
        config = config.replace(**settings)
        super().__init__(text, config=config)


class TatsuParser(Parser):
    def __init__(self, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)
        super().__init__(config=config)

    @tatsumasu()
    def _start_(self):  # noqa
        self._expression_()
        self._check_eof()

    @tatsumasu()
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                def block1():
                    self._subject_()

                self._positive_closure(block1)

                def block2():
                    self._object_()

                self._positive_closure(block2)

                def block3():
                    self._expression_()

                self._closure(block3)
            with self._option():
                def block4():
                    self._object_()

                self._positive_closure(block4)

                def block5():
                    self._subject_()

                self._positive_closure(block5)

                def block6():
                    self._expression_()

                self._closure(block6)
            # self._error(
            #    'expecting one of: '
            #    "'bottle' 'cup' 'human' 'mug' 'person'"
            #    '<object> <subject>'
            # )

    @tatsumasu()
    def _subject_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('person')
            with self._option():
                self._token('human')
            # self._error(
            #    'expecting one of: '
            #    "'human' 'person'"
            # )

    @tatsumasu()
    def _object_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('cup')
            with self._option():
                self._token('mug')
            with self._option():
                self._token('bottle')
            # self._error(
            #    'expecting one of: '
            #    "'bottle' 'cup' 'mug'"
            # )


class TatsuSemantics:
    def start(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        subject = ast[0]
        object = ast[1]
        if subject[0] == 'person' and object[0] == 'bottle':
            return "Person picks bottle"

        return

    def subject(self, ast):  # noqa
        return ast

    def object(self, ast):  # noqa
        return ast


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = TatsuParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, TatsuParser, name='Tatsu')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
